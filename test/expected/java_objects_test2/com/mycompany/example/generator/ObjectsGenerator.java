/**
 * Copyright (c) 2015 by My Company
 * This file and its contents are Confidential.
 */
package com.mycompany.example.generator;

import java.text.SimpleDateFormat;
import java.util.Date;
import com.fasterxml.jackson.core.JsonGenerator;
import java.io.IOException;

/**
 * Generated by John Doe from java_objects_test2.xml on 15/6/2015
 */
public class ObjectsGenerator {

    public static SimpleDateFormat ISO8601_JAVA_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", java.util.Locale.US);
    public static org.joda.time.format.DateTimeFormatter ISO8601_JODA_DATE_FORMAT = org.joda.time.format.ISODateTimeFormat.dateTime();

    /**
     * set of actual generator methods, 2 per class
     */

    public static void generateJson(JsonGenerator gen, com.mycompany.messages.Conversation object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.mycompany.messages.Conversation object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {

                /* processing field: "title" */
                if (object.getTitle() != null)
                    gen.writeStringField("title", object.getTitle());

                /* processing field: "participant-ids" */
                if (object.getParticipantIds() != null) {
                    gen.writeArrayFieldStart("participant-ids");
                    for (Integer value : object.getParticipantIds()) {
                        gen.writeNumber(value.intValue());
                    }
                    gen.writeEndArray();
                }

                /* processing field: "messages" */
                if (object.getMessages() != null) {
                    gen.writeArrayFieldStart("messages");
                    for (String value : object.getMessages()) {
                        gen.writeString(value);
                    }
                    gen.writeEndArray();
                }
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

    public static void generateJson(JsonGenerator gen, com.mycompany.messages.Conversations object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.mycompany.messages.Conversations object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {

                /* processing field: "date" */
                if (object.getDate() != null)
                    gen.writeStringField("date", ISO8601_JODA_DATE_FORMAT.print(object.getDate()));

                /* processing field: "conversations" */
                if (object.getConversations() != null) {
                    gen.writeArrayFieldStart("conversations");
                    for (com.mycompany.messages.Conversation value : object.getConversations()) {
                        generateJson(gen, value);
                    }
                    gen.writeEndArray();
                }

                /* processing field: "company" */
                if (object.getCompany() != null)
                    ObjectsGenerator.generateJson(gen, object.getCompany(), "company");

                /* processing field: "joda-dates" */
                if (object.getJodaDates() != null) {
                    gen.writeArrayFieldStart("joda-dates");
                    for (org.joda.time.DateTime value : object.getJodaDates()) {
                        gen.writeString(ISO8601_JODA_DATE_FORMAT.print(value));
                    }
                    gen.writeEndArray();
                }

                /* processing field: "normal-dates" */
                if (object.getNormalDates() != null) {
                    gen.writeArrayFieldStart("normal-dates");
                    for (java.util.Date value : object.getNormalDates()) {
                        gen.writeString(ISO8601_JAVA_DATE_FORMAT.format(value));
                    }
                    gen.writeEndArray();
                }
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

    public static void generateJson(JsonGenerator gen, com.mycompany.messages.EntryNotIsSet object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.mycompany.messages.EntryNotIsSet object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {

                /* processing field: "date" */
                if (object.getDate() != null)
                    gen.writeStringField("date", ISO8601_JAVA_DATE_FORMAT.format(object.getDate()));

                /* processing field: "dates" */
                if (object.getDates() != null) {
                    gen.writeArrayFieldStart("dates");
                    for (java.util.Date value : object.getDates()) {
                        gen.writeString(ISO8601_JAVA_DATE_FORMAT.format(value));
                    }
                    gen.writeEndArray();
                }

                /* processing field: "doubleValue" */
                gen.writeNumberField("doubleValue", object.getDoubleValue());

                /* processing field: "stringValue" */
                if (object.getStringValue() != null)
                    gen.writeStringField("stringValue", object.getStringValue());

                /* processing field: "boolValue" */
                gen.writeBooleanField("boolValue", object.getBoolValue());

                /* processing field: "intValue" */
                gen.writeNumberField("intValue", object.getIntValue());

                /* processing field: "longValue" */
                gen.writeNumberField("longValue", object.getLongValue());

                /* processing field: "byteValue" */
                gen.writeNumberField("byteValue", object.getByteValue());

                /* processing field: "longArray" */
                if (object.getLongArray() != null) {
                    gen.writeArrayFieldStart("longArray");
                    for (Long value : object.getLongArray()) {
                        gen.writeNumber(value.longValue());
                    }
                    gen.writeEndArray();
                }

                /* processing field: "lat" */
                gen.writeNumberField("lat", object.getLat());

                /* processing field: "long" */
                gen.writeNumberField("long", object.getLong());
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

    public static void generateJson(JsonGenerator gen, com.mycompany.messages.EntryIsSet object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.mycompany.messages.EntryIsSet object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {

                /* processing field: "date" */
                if (object.getDate() != null)
                    gen.writeStringField("date", ISO8601_JAVA_DATE_FORMAT.format(object.getDate()));

                /* processing field: "dates" */
                if (object.getDates() != null) {
                    gen.writeArrayFieldStart("dates");
                    for (java.util.Date value : object.getDates()) {
                        gen.writeString(ISO8601_JAVA_DATE_FORMAT.format(value));
                    }
                    gen.writeEndArray();
                }

                /* processing field: "doubleValue" */
                gen.writeNumberField("doubleValue", object.getDoubleValue());

                /* processing field: "stringValue" */
                if (object.getStringValue() != null)
                    gen.writeStringField("stringValue", object.getStringValue());

                /* processing field: "boolValue" */
                gen.writeBooleanField("boolValue", object.getBoolValue());

                /* processing field: "intValue" */
                gen.writeNumberField("intValue", object.getIntValue());

                /* processing field: "longValue" */
                gen.writeNumberField("longValue", object.getLongValue());

                /* processing field: "byteValue" */
                gen.writeNumberField("byteValue", object.getByteValue());

                /* processing field: "longArray" */
                if (object.getLongArray() != null) {
                    gen.writeArrayFieldStart("longArray");
                    for (Long value : object.getLongArray()) {
                        gen.writeNumber(value.longValue());
                    }
                    gen.writeEndArray();
                }

                /* processing field: "lat" */
                gen.writeNumberField("lat", object.getLat());

                /* processing field: "long" */
                gen.writeNumberField("long", object.getLong());
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

    public static void generateJson(JsonGenerator gen, com.mycompany.example.UserData object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.mycompany.example.UserData object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {

                /* processing field: "name" */
                if (object.getName() != null)
                    gen.writeStringField("name", object.getName());

                /* processing field: "occupation" */
                if (object.getOccupation() != null)
                    gen.writeStringField("occupation", object.getOccupation());

                /* processing field: "age" */
                gen.writeNumberField("age", object.getAge());

                /* processing field: "visits" */
                if (object.getVisits() != null) {
                    gen.writeArrayFieldStart("visits");
                    for (java.util.Date value : object.getVisits()) {
                        gen.writeString(ISO8601_JAVA_DATE_FORMAT.format(value));
                    }
                    gen.writeEndArray();
                }
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

}
