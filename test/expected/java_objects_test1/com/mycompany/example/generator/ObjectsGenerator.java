/**
 * Copyright (c) 2015 by My Company
 * This file and its contents are Confidential.
 */
package com.mycompany.example.generator;

import java.text.SimpleDateFormat;
import java.util.Date;
import com.fasterxml.jackson.core.JsonGenerator;
import java.io.IOException;

/**
 * Generated by John Doe from java_objects_test1.xml on 15/6/2015
 */
public class ObjectsGenerator {

    public static org.joda.time.format.DateTimeFormatter ISO8601_JODA_DATE_FORMAT = org.joda.time.format.ISODateTimeFormat.dateTime();

    /**
     * set of actual generator methods, 2 per class
     */

    public static void generateJson(JsonGenerator gen, com.arrays.test.CommandLine object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.arrays.test.CommandLine object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {

                /* processing field: "executable" */
                if (object.getExecutable() != null)
                    gen.writeStringField("executable", object.getExecutable());

                /* processing field: "arguments" */
                if (object.getArguments() != null) {
                    gen.writeArrayFieldStart("arguments");
                    for (String value : object.getArguments()) {
                        gen.writeString(value);
                    }
                    gen.writeEndArray();
                }
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

    public static void generateJson(JsonGenerator gen, com.arrays.test.CommandLineVersion1 object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.arrays.test.CommandLineVersion1 object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

    public static void generateJson(JsonGenerator gen, com.arrays.test.CommandLineVersion2 object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.arrays.test.CommandLineVersion2 object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

    public static void generateJson(JsonGenerator gen, com.arrays.test.FieldsTest object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.arrays.test.FieldsTest object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {

                /* processing field: "0field00" */
                if (object.get0field00() != null)
                    ObjectsGenerator.generateJson(gen, object.get0field00(), "0field00");

                /* processing field: "1field01" */
                if (object.get1field01() != null)
                    ObjectsGenerator.generateJson(gen, object.get1field01(), "1field01");

                /* processing field: "field1" */
                if (object.getField1() != null)
                    ObjectsGenerator.generateJson(gen, object.getField1(), "field1");

                /* processing field: "field2" */
                if (object.getField2() != null)
                    ObjectsGenerator.generateJson(gen, object.getField2(), "field2");

                /* processing field: "field3" */
                if (object.getField3() != null)
                    ObjectsGenerator.generateJson(gen, object.getField3(), "field3");

                /* processing field: "array1" */
                if (object.getArray1() != null) {
                    gen.writeArrayFieldStart("array1");
                    for (com.arrays.test.CommandLine value : object.getArray1()) {
                        generateJson(gen, value);
                    }
                    gen.writeEndArray();
                }

                /* processing field: "array2" */
                if (object.getArray2() != null) {
                    gen.writeArrayFieldStart("array2");
                    for (com.arrays.test.CommandLine value : object.getArray2()) {
                        generateJson(gen, value);
                    }
                    gen.writeEndArray();
                }

                /* processing field: "array3" */
                if (object.getArray3() != null) {
                    gen.writeArrayFieldStart("array3");
                    for (com.structs.test.WorkPackage value : object.getArray3()) {
                        generateJson(gen, value);
                    }
                    gen.writeEndArray();
                }
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

    public static void generateJson(JsonGenerator gen, com.arrays.test.EmptyObject object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.arrays.test.EmptyObject object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

    public static void generateJson(JsonGenerator gen, com.mycompany.users.PersonalUserData object) throws IOException {
        generateJson(gen, object, null);
    }

    private static void generateJson(JsonGenerator gen, com.mycompany.users.PersonalUserData object, String fieldName) throws IOException {
        try {
            /* start of the object */
            if (fieldName == null) { 
                gen.writeStartObject();
            } else {
                gen.writeObjectFieldStart(fieldName);
            }

            if (object != null) {

                /* processing field: "name" */
                if (object.getName() != null)
                    gen.writeStringField("name", object.getName());

                /* processing field: "occupation" */
                if (object.getOccupation() != null)
                    gen.writeStringField("occupation", object.getOccupation());

                /* processing field: "age" */
                gen.writeNumberField("age", object.getAge());

                /* processing field: "visits" */
                if (object.getVisits() != null) {
                    gen.writeArrayFieldStart("visits");
                    for (org.joda.time.DateTime value : object.getVisits()) {
                        gen.writeString(ISO8601_JODA_DATE_FORMAT.print(value));
                    }
                    gen.writeEndArray();
                }
            }

             /* end of the object */
            gen.writeEndObject();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("Unable to generate JSON");
        }
    }

}
